#!/usr/bin/env bash

dataDir="$HOME/code/dotFiles/anx-api"

function mycurl(){
	result=$(http --print=hb --session=$@) &&
	status=$(echo "$result" | head -n 1 | ack -o -1 '[1-5][0-9]{2}')
	json_response=$(echo "$result" | tail -n 1)
	count=$(echo "$json_response" | json "response.count")

	if $strip_repsonse; then
		model=$(get_model "$json_response")
		local el=$(echo "$model" | json 0)

		if [[ $count == 1 ]] && [[ ! -z "$el" ]]; then
			model="$el"
		fi
	else
		model=$json_response;
	fi
}

function querystring_concat(){
	if [[ ! -z "$2" ]]; then
		if [[ $1 =~ \? ]]; then
			echo "$1&$2"; return;
		else
			echo "$1?$2"; return;
		fi
	fi

	echo "$1";
}

function get_count(){
	echo "$1" | json "response.count"
}

function get_model(){
	local n=$(echo "$1" | json "response.dbg_info.output_term")

	if [[ $n == 'not_found' ]]; then
		echo "$1"
	else
		local v=$(echo "$1" | json "response.$n")
		echo "$v"
	fi
}

function api_client() {
	local key=$1;
	local url=$2;
	local authfile=$3;
	shift 3;

	local version=
	local member=
	local id=
	local do_edit=false
	local do_save=false
	local strip_repsonse=true
	local httpie_args=
	local method='GET'
	
	parse_api "$@"
	set -- $httpie_args;

	if [[ $1 =~ ^(get|post|put|head|delete|GET|POST|PUT|HEAD|DELETE)$ ]]; then
		method=$(echo "$1" | tr '[a-z]' '[A-Z]')
		shift
	fi

	if [[ ! -z "${anx_api_version[$key]}" ]]; then
		url="$url/${anx_api_version[$key]}"
	fi

	service=${1/\?*/}
	route="$url/$service"
	shift

	if [[ ! -z "${anx_api_member[$key]}" ]]; then
		route=$(querystring_concat $route "member_id=${anx_api_member[$key]}")
	fi

	if [[ ! -z "$id" ]]; then
		route=$(querystring_concat $route "id=$id")
	fi

	echo "$method $route $@"
	mycurl $key $method $route $@

	if [[ "$status" == "401" ]]; then
		if [[ ! -s "$authfile" ]]; then
			echo "unable to authenticate.  create $authfile to enable auto-login"
			return 1
		fi
		printf 'logging in...'
		mycurl $key 'POST' "$url/auth" @$authfile

		if [[ "$status" != "200" ]]; then
			echo 'unable to authenticate'
			return 1
		else
			echo ' done.'
		fi
		
		#now do it again
		mycurl $key $method $route $@
	fi

	if [[ -z "$id" ]] && [[ $count == 1 ]];then
		id=$(echo "$model" | json "id")
	fi

	if $do_save; then 
		if [[ -z "$id" ]]; then
			echo "need an id to save... exiting.";
			return 666;
		fi
		echo "Writing file '$service.$id.json'"

		echo "{\"$service\":$model}" | python -m json.tool >  "$service.$id.json" 
	elif [ -t 1 ]; then # use colors if no being piped
		echo "$model" | python -m json.tool | pygmentize -l json | less -R
	else 
		echo "$model" | python -m json.tool
	fi

	if $do_edit; then 
		printf 'PUTTING...'
		 vim "$service.$id.json" &&
			http --print=b --session="$sess" PUT "$url/$service?id=$id" @"$service.$id.json" | json response.status response.error
	fi
}

function parse_api(){
	local OPTIND
	while getopts ":drsq:ei:m:v:" opt; do
	  case $opt in
		d)
			strip_repsonse=false
			;;
		s)
			do_save=true
			;;
		e)
			do_save=true
			do_edit=true
			;;
		i)
			id="$OPTARG"
			;;
		v)
			anx_api_version[$key]="$OPTARG"
			;;
		m)
			anx_api_member[$key]="$OPTARG"
			;;
		r)
			anx_api_version[$key]=''
			anx_api_member[$key]=''
			rm -rf ~/.httpie
			echo 'member and version cleared!'
			return 1
			;;
		\?)
		  echo "Invalid option: -$OPTARG" >&2
			return 666;
		  ;;
		:)
		  echo "Option -$OPTARG requires an argument." >&2
		  return 666;
		  ;;
	  esac
	done
	shift $((OPTIND-1))

	if [[ "$#" -ge 1 ]]; then
		httpie_args+=" $1"
		shift
		parse_api "$@";
	else
		:
	fi

}

function sand(){
	api_client \
		'sand' \
		"http://sand.api.appnexus.com"  \
		"$dataDir/auth-sand.private" \
		"$@"
}

function prod(){
	api_client 'prod' "$ANX_PROD_API_MEMBER" "$ANX_SAND_API_ID" 'http://api.appnexus.com' "$dataDir/auth-prod.private" $@
}

