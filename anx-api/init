#!/usr/bin/env bash

dataDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function _mycurl(){
	result=$(http --print=hb --session=$@) &&
	status=$(echo "$result" | head -n 1 | ack -o -1 '[1-5][0-9]{2}')
	json_response=$(echo "$result" | tail -n 1)
	count=$(echo "$json_response" | json "response.count")
	local myObj=$(_get_model "$json_response");
	local myId=$(echo "$myObj" | json "id")

	if $strip_repsonse; then
		model=$myObj
		local el=$(echo "$model" | json 0)

		if [[ $count == 1 ]] && [[ ! -z "$el" ]]; then
			model="$el"
		fi
	else
		model=$json_response;
	fi
}

function _querystring_concat(){
	if [[ ! -z "$2" ]]; then
		if [[ $1 =~ \? ]]; then
			echo "$1&$2"; return;
		else
			echo "$1?$2"; return;
		fi
	fi

	echo "$1";
}

function _get_count(){
	echo "$1" | json "response.count"
}

function _get_model(){
	local n=$(echo "$1" | json "response.dbg_info.output_term")

	if [[ $n == 'not_found' ]]; then
		echo "$1"
	else
		local v=$(echo "$1" | json "response.$n")
		echo "$v"
	fi
}

function _print_call(){
	if [[ -t 1 ]]; then
		echo "$method $route $file"
	fi
}

function _print_status(){
	if [[ -t 1 ]]; then
		echo "$status"
	fi
}
function _print_results(){
	if [[ -t 1 ]]; then
		if [[ $count == 0 ]]; then echo -n 'No results'; fi
		if [[ $count > 1 ]]; then echo -n "Found $count results"; fi
		if [[ $count == 1 ]] && [[ ! -z "$myId" ]]; then echo -n "Found 1 result: $myId"; fi
		if [[ $count == 1 ]] && [[ -z "$myId" ]]; then echo -n "Found 1 result"; fi
		
		if [[ ! -z "$count" ]]; then
			read;
		fi
	fi
}

function _api_client() {
	local key=$1;
	local url=$2;
	local authfile=$3;
	shift 3;

	local version=
	local member=
	local id=
	local do_edit=false
	local do_save=false
	local strip_repsonse=true
	local httpie_args=
	local method='GET'
	local file=
	
	if ! _parse_api "$@"; then
		return 666;
	fi
	set -- $httpie_args;

	if [[ $1 =~ ^(get|post|put|head|delete|GET|POST|PUT|HEAD|DELETE)$ ]]; then
		method=$(echo "$1" | tr '[a-z]' '[A-Z]')
		shift
	fi

	if [[ ! -z "${anx_api_version[$key]}" ]]; then
		url="$url/${anx_api_version[$key]}"
	fi

	service=${1/\?*/}
	route="$url/$service"
	shift

	file=$1
	shift

	if [[ ! -z "${anx_api_member[$key]}" ]]; then
		route=$(_querystring_concat $route "member_id=${anx_api_member[$key]}")
		member="${anx_api_member[$key]}"
	fi

	if [[ ! -z "$id" ]]; then
		route=$(_querystring_concat $route "id=$id")
	fi


	if $do_save || [[ $method =~ ^PUT|POST$ ]]; then
		# if we don't have a filename
		if [[ -z "$file" ]]; then
			if [[ ! -z "$id" ]]; then
				file="$service.$id.json"
			elif [[ $method =~ ^PUT|POST$ ]]; then
				echo "A file name or id is required for a $method.">&2; return 666;
			elif $do_save; then
				echo 'A file name or id is required to save the results'>&2;
				do_save=false;
				do_edit=false
			fi
		fi
	fi

	if [[ ! -z "$file" && ! "$file" =~ ^@ ]]; then
		file="@$file"
	fi

	local filename=$(echo $file | tr -d '@')

	if [[ $method =~ ^PUT|POST$ && ! -s $file ]]; then
		echo "$file not found.">&2;
		return 6;
	fi

	_print_call
	_mycurl $key $method $route $file 

	if [[ "$status" == "401" ]]; then
		if [[ ! -s "$authfile" ]]; then
			echo "unable to authenticate.  create $authfile to enable auto-login"
			return 1
		fi
		printf 'logging in...'
		_mycurl $key 'POST' "$url/auth" @$authfile

		if [[ "$status" == "200" ]]; then
			echo ' done.'
		else
			echo 'unable to authenticate'
			return 1
		fi
		
		#now we are authenticated, so do it again
		_mycurl $key $method $route $file
	fi


	_print_results;

	if [[ -z "$id" ]] && [[ $count == 1 ]];then
		id=$(echo "$model" | json "id")
	fi

	if $do_save; then 
		echo "Writing file '$service.$id.json'"
		echo "{\"$service\":$model}" | python -m json.tool >  "$service.$id.json" 
	elif [ -t 1 ]; then # use colors if no being piped
		echo "$model" | python -m json.tool | pygmentize -l json | less -R
	else 
		echo "$model" | python -m json.tool
	fi

	if $do_edit; then
			# we edit the file before PUTING back to the server.  exiting vim with an error code stops everything
			if ! vim "$filename"; then
				echo 'PUT canceled.  Exiting...'
				return 1;
			fi

			# keep on editing the file until it passes linting
			while ! jsonlint -q "$filename" ; do
				read;
				if ! vim "$filename"; then
					echo 'PUT canceled.  Exiting...'
					return 1;
				fi
			done

			_
			http --print=b --session="$key" PUT "$url/$service?id=$id&member_id=$member" @"$service.$id.json" | json response.status response.error
	fi
}

function _parse_api(){
	local OPTIND
	while getopts ":drsq:ei:m:v:" opt; do
	  case $opt in
		d)
			strip_repsonse=false
			;;
		s)
			do_save=true
			;;
		e)
			do_save=true
			do_edit=true
			;;
		i)
			id="$OPTARG"
			;;
		v)
			anx_api_version[$key]="$OPTARG"
			;;
		m)
			anx_api_member[$key]="$OPTARG"
			;;
		r)
			anx_api_version[$key]=''
			anx_api_member[$key]=''
			rm -rf ~/.httpie
			echo 'member and version cleared!'
			return 1
			;;
		\?)
		  echo "Invalid option: -$OPTARG" >&2
			return 666;
		  ;;
		:)
		  echo "Option -$OPTARG requires an argument." >&2
		  return 666;
		  ;;
	  esac
	done
	shift $((OPTIND-1))

	if [[ "$#" -ge 1 ]]; then
		httpie_args+=" $1"
		shift
		if ! _parse_api "$@"; then
			return 555;
		fi
		
	else
		return 0;
	fi

}

function sand(){
	local status=
	_api_client \
		'sand' \
		"http://sand.api.appnexus.com"  \
		"$dataDir/auth-sand.private" \
		"$@"

	if [[ $status == "200" ]]; then
		return 0;
	else
		echo "$status"
		return $status
	fi
}

function prod(){
	_api_client \
		'prod' \
		"http://api.appnexus.com"  \
		"$dataDir/auth-prod.private" \
		"$@"
}

