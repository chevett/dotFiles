#!/usr/bin/env bash

dataDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function _mycurl(){
	[[ -t 1 ]] && [[ $2 == "GET" ]] && printf "${BLUE}$2${RESTORE}" > /dev/tty
	[[ -t 1 ]] && [[ $2 == "PUT" ]] && printf "${PURPLE}$2${RESTORE}" > /dev/tty
	[[ -t 1 ]] && [[ $2 == "POST" ]] && printf "${LPURPLE}$2${RESTORE}" > /dev/tty
	[[ -t 1 ]] && printf " $3 $4" > /dev/tty

	result=$(http --print=hb --session=$@) &&
	status=$(echo "$result" | head -n 1 | ack -o -1 '[1-5][0-9]{2}')
	
	[[ -t 1 ]] && [[ $status =~ 4|5 ]] && printf " ${RED} $status ${RESTORE}\n" > /dev/tty
	[[ -t 1 ]] && [[ $status =~ 2.. ]] && printf " ${GREEN} $status ${RESTORE}\n" > /dev/tty
	if [[ "$status" == "401" ]]; then

		if [[ ! -s "$authfile" ]]; then
			echo "unable to authenticate.  create $authfile to enable auto-login"
			return 1
		fi
		_mycurl $key 'POST' "$url/auth" @$authfile

		if [[ "$status" != "200" ]]; then
			echo 'unable to authenticate'
			return 1
		fi
		
		#now we are authenticated, so do it again
		_mycurl $@
	fi
	
	json_response=$(echo "$result" | tail -n 1)

	count=$(echo "$json_response" | json "response.count")
	err=$(echo "$json_response" | json "response.error")
	err_id=$(echo "$json_response" | json "response.error_id")
	local myObj=$(_get_model "$json_response");
	local myId=$(echo "$myObj" | json "id")

	if $strip_repsonse; then
		model=$myObj
		local el=$(echo "$model" | json 0)

		if [[ $count == 1 ]] && [[ ! -z "$el" ]]; then
			model="$el"
		fi
	else
		model=$json_response;
	fi
}

function _querystring_concat(){
	if [[ ! -z "$2" ]]; then
		if [[ $1 =~ \? ]]; then
			echo "$1&$2"; return;
		else
			echo "$1?$2"; return;
		fi
	fi

	echo "$1";
}

function _get_count(){
	[[ -t 1 ]] && echo "$1" | json "response.count" > /dev/tty
}

function _get_model(){
	local n=$(echo "$1" | json "response.dbg_info.output_term")

	if [[ $n == 'not_found' ]]; then
		echo "$1"
	else
		local v=$(echo "$1" | json "response.$n")
		echo "$v"
	fi
}

function _print_status(){
	[[ -t 1 ]] && echo "$status" > /dev/tty
}
function _print_results(){
	if [[ -t 1 ]]; then
		if [[ $count == 0 ]]; then echo 'No results'; fi
		if [[ $count > 1 ]]; then echo "Found $count results"; fi
		if [[ $count == 1 ]] && [[ ! -z "$myId" ]]; then echo -n "Found 1 result: $myId"; fi
		if [[ $count == 1 ]] && [[ -z "$myId" ]]; then echo -n "Found 1 result"; fi
		
		if [[ ! -z "$count" ]]; then
			read;
		fi
	fi
}

function _ensureFileName(){
	if [[ -z "$file" ]]; then
		if [[ ! -z "$id" ]]; then
			file="$service.$id.json"
		elif [[ $method =~ ^PUT|POST$ ]]; then
			echo "A file name or id is required for a $method.">&2; return 666;
		elif $do_save; then
			echo 'A file name or id is required to save the results'>&2;
			do_save=false;
			do_edit=false
		fi
	fi

	if [[ ! -z "$file" && ! "$file" =~ ^@ ]]; then
		file="@$file"
	fi

	filename=$(echo $file | tr -d '@')
}

function _api_client() {
	local key=$1;
	local url=$2;
	local authfile=$3;
	shift 3;

	local version=
	local member=
	local id=
	local do_edit=false
	local do_save=false
	local skip_fetch=false
	local strip_repsonse=true
	local httpie_args=
	local method='GET'
	local file=
	local filename=
	
	if ! _parse_api "$@"; then
		return 666;
	fi
	set -- $httpie_args;

	if [[ $1 =~ ^(get|post|put|head|delete|GET|POST|PUT|HEAD|DELETE)$ ]]; then
		method=$(echo "$1" | tr '[a-z]' '[A-Z]')
		shift
	fi

	if [[ ! -z "${anx_api_version[$key]}" ]]; then
		url="$url/${anx_api_version[$key]}"
	fi

	service=${1/\?*/}
	route="$url/$service"
	shift

	file=$1
	shift

	if [[ ! -z "${anx_api_member[$key]}" ]]; then
		route=$(_querystring_concat $route "member_id=${anx_api_member[$key]}")
		member="${anx_api_member[$key]}"
	fi

	if [[ ! -z "$id" ]]; then
		route=$(_querystring_concat $route "id=$id")
	fi

	if $skip_fetch || [[ $method =~ ^PUT|POST$ ]]; then
		_ensureFileName
		if [[ ! -s $filename ]]; then
			echo "File not found: $filename">&2;
			return 666;
		fi
	fi

	if ! $skip_fetch; then
		if ! _mycurl $key $method $route $file; then
			return 555;
		fi

		_print_results;

		if [[ -z "$id" ]] && [[ $count == 1 ]];then
			id=$(echo "$model" | json "id")
		fi

		if $do_save; then 
			_ensureFileName
			echo "{\"$service\":$model}" | python -m json.tool >  "$filename" 
		elif [ -t 1 ]; then # use colors if no being piped
			echo "$model" | python -m json.tool | pygmentize -l json | less -R
		else 
			echo "$model" | python -m json.tool
		fi
	fi

	$do_edit && _start_edit;
		
	
}

function _start_edit(){
	# we edit the file before PUTING back to the server.  exiting vim with an error code stops everything
	if ! vim "$filename"; then
		echo 'PUT canceled.  Exiting...'
		return 1;
	fi

	# keep on editing the file until it passes linting
	while ! jsonlint -q "$filename" ; do
		read;
		if ! vim "$filename"; then
			echo 'PUT canceled.  Exiting...'
			return 1;
		fi
	done

	_mycurl $key PUT $route $file
	[[ -z "$err" ]] && printf "${GREEN}Success${RESTORE}!\n"
	[[ ! -z "$err" ]] && 
		printf "${RED}error${RESTORE}: $err (${RED}$err_id${RESTORE})\n" &&
			read && _start_edit
}

function _parse_api(){
	local OPTIND
	while getopts ":drRsq:eEi:m:v:" opt; do
	  case $opt in
		d)
			strip_repsonse=false
			;;
		s)
			do_save=true
			;;
		E)
			do_save=true
			do_edit=true
			skip_fetch=true
			;;
		e)
			do_save=true
			do_edit=true
			;;
		i)
			id="$OPTARG"
			;;
		v)
			anx_api_version[$key]="$OPTARG"
			;;
		m)
			anx_api_member[$key]="$OPTARG"
			;;
		R)
			anx_api_version[$key]=''
			anx_api_member[$key]=''
			rm -rf ~/.httpie
			echo 'member and version cleared!'
			;;
		r)
			anx_api_version[$key]=''
			anx_api_member[$key]=''
			;;
		\?)
		  echo "Invalid option: -$OPTARG" >&2
			return 666;
		  ;;
		:)
		  echo "Option -$OPTARG requires an argument." >&2
		  return 666;
		  ;;
	  esac
	done
	shift $((OPTIND-1))

	if [[ "$#" -ge 1 ]]; then
		httpie_args+=" $1"
		shift
		if ! _parse_api "$@"; then
			return 555;
		fi
		
	else
		return 0;
	fi

}

function sand(){
	local status=
	_api_client \
		'sand' \
		"http://sand.api.appnexus.com"  \
		"$dataDir/auth-sand.private" \
		"$@"

	if [[ $status == "200" ]]; then
		return 0;
	else
		echo "$status"
		return $status
	fi
}

function prod(){
	_api_client \
		'prod' \
		"http://api.appnexus.com"  \
		"$dataDir/auth-prod.private" \
		"$@"
}

