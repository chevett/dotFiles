#!/usr/bin/env bash

dataDir="$HOME/code/dotFiles/anx-api"

function mycurl(){
	result=$(http --print=hb --session=$@) &&
	status=$(echo "$result" | head -n 1 | ack -o -1 '[1-5][0-9]{2}')
	json_response=$(echo "$result" | tail -n 1)
	count=$(echo "$json_response" | json "response.count")

	model=$(get_model "$json_response")
	local el=$(echo "$model" | json 0)

	if [[ $count == 1 ]] && [[ ! -z "$el" ]]; then
		model="$el"
	fi

	id=$(echo "$model" | json "id")
}

function querystring_concat(){
	if [[ ! -z "$2" ]]; then
		if [[ $1 =~ \? ]]; then
			echo "$1&$2"; return;
		else
			echo "$1?$2"; return;
		fi
	fi

	echo "$1";
}

function get_count(){
	echo "$1" | json "response.count"
}

function get_model(){
	local n=$(echo "$1" | json "response.dbg_info.output_term")

	if [[ $n == 'not_found' ]]; then
		echo "$1"
	else
		local v=$(echo "$1" | json "response.$n")
		echo "$v"
	fi
}

function api_client() {
	local sess=$1
	local anx_version=$2
	local member=$3
	local anx_obj_id=$4
	local url=$5
	local authfile=$6
	shift 6;

	local method='get'
	if [[ $1 =~ ^(get|post|put|head|delete|GET|POST|PUT|HEAD|DELETE)$ ]]; then
		method=$7
		shift
	fi

	if [[ ! -z "$anx_version" ]]; then
		url="$url/$anx_version"
	fi


	service=${1/\?*/}
	echo "service:$service"
	route="$url/$1"
	shift

	if [[ ! -z "$member" ]]; then
		route=$(querystring_concat $route "member_id=$member")
	fi

	if [[ ! -z "$anx_obj_id" ]]; then
		route=$(querystring_concat $route "id=$anx_obj_id")
	fi

	route=$(querystring_concat $route "$querystring")

	echo "$method $route $@"
	mycurl $sess $method $route $@

	if [[ "$status" == "401" ]]; then
		if [[ ! -s "$authfile" ]]; then
			echo "unable to authenticate.  create $authfile to enable auto-login"
			return 1
		fi
		printf 'logging in...'
		mycurl $sess 'POST' "$url/auth" @$authfile

		if [[ "$status" != "200" ]]; then
			echo 'unable to authenticate'
			return 1
		else
			echo ' done.'
		fi
		
		#now do it again
		mycurl $sess $method $route $@
	fi

	local id="$anx_obj_id"
	if [[ $count == 1 ]];then
		id=$(echo "$model" | json "id")
	fi

	if $do_save; then 
		if [[ -z "$id" ]]; then
			echo "need an id to save... exiting.";
			return 666;
		fi
		echo "Writing file '$service.$id.json'"

		echo "{\"$service\":$model}" | python -m json.tool >  "$service.$id.json" 
	elif [ -t 1 ]; then # use colors if no being piped
		echo "$model" | python -m json.tool | pygmentize -l json | less -R
	else 
		echo "$model" | python -m json.tool
	fi

	if $do_edit; then 
		printf 'PUTTING...'
		 vim "$service.$id.json" &&
			http --print=b --session="$sess" PUT "$url/$service?id=$id" @"$service.$id.json" | json response.status response.error
	fi
}

function parse_api(){
	local OPTIND
	while getopts ":rsq:ei:m:v:" opt; do
	  case $opt in
		q)
			querystring+="$OPTARG"
			;;
		v)
			ANX_SAND_API_VERSION="$OPTARG"
			;;
		m)
			ANX_SAND_API_MEMBER="$OPTARG"
			;;
		i)
			ANX_SAND_API_ID="$OPTARG"
			;;
		r)
			ANX_SAND_API_VERSION=''
			ANX_SAND_API_MEMBER=''
			rm -rf ~/.httpie
			echo 'member and version cleared!'
			return 1
			;;
		s)
			do_save=true
			;;
		e)
			do_save=true
			do_edit=true
			;;
		\?)
		  echo "Invalid option: -$OPTARG" >&2
			return
		  ;;
		:)
		  echo "Option -$OPTARG requires an argument." >&2
		  return
		  ;;
	  esac
	done
	shift $((OPTIND-1))

	if [[ "$#" -ge 1 ]]; then
		httpie_args+=" $1"
		shift
		parse_api "$@";
	else
		:
	fi

}

function sand(){
	local querystring=''
	local do_edit=false
	local do_save=false
	local httpie_args
	local ANX_SAND_API_ID

	if parse_api "$@"; then 
		api_client \
			'sand' \
			"$ANX_SAND_API_VERSION"  \
			"$ANX_SAND_API_MEMBER"  \
			"$ANX_SAND_API_ID"  \
			"http://sand.api.appnexus.com"  \
			"$dataDir/auth-sand.private"  \
			$httpie_args
	fi
}

function prod(){
	api_client 'prod' "$ANX_PROD_API_MEMBER" "$ANX_SAND_API_ID" 'http://api.appnexus.com' "$dataDir/auth-prod.private" $@
}

