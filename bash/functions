#! /usr/bin/env bash

function where(){
	gfind . -iname "*$1*"
}

function cm() { git commit -am "$*"; }
function lastfiletime(){
	echo "$(ll -tr | tail -1 | awk '{print $8;}') vs $(date | awk '{print $4;}')"
}
function killp() { 
	local d=$(lsof -i :"$1" | tail -1)
	local p
	local n
	
	if [[ -z "$d" ]]; then
		echo "Nothing running on $1."
		return 666;
	fi

	read n p _ < <(echo "$d");
	read -p "Kill $n($p)? " -n 1 -r
	
	echo "";

	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo "not killed.";
		return 666;
	else 
		kill "$p";
		echo "killed.";
	fi
}

function serve(){
	local p="$1";

	if [[ -z "$p" ]]; then
		p="8000";
	fi

	yes | killp "$p";
	python -m SimpleHTTPServer "$p" > /dev/null 2>&1 &
	open -a Google\ Chrome "http://localhost:$p/";
}

function resolveCaretRefs(){
	# ^^^ file.js means get the hash from 3 changes back
	# todo: must pass filename


	if [[  $1 =~ ^\^+$ ]]; then
		local x=$(echo "$1" | wc -c);
		x=$((x-1));
		git log --format="%H" "$2" | sed -n "$x p";
	else
		echo "$1";
	fi
}

function d(){
	# should look like 'd head^^^ head^^ javascript.js'
	# if only one commit is given then it assumed we want to compare to it's parent
	local start=;
	local stop=;
	local fileName=;
	local filePath=;

		
	if [[ "$#" == 2 ]]; then
		fileName="$2";
		filePath=$(whereSelect "$fileName");

		start=$(resolveCaretRefs "$1" "$filePath")
		stop="$start";
		start="$start^";
	else
		fileName="$3";
		filePath=$(whereSelect "$fileName");

		start=$(resolveCaretRefs "$1" "$filePath")
		stop=$(resolveCaretRefs "$2" "$filePath")
	fi

		echo "$start" "$stop" "$filePath"
		git diff "$start" "$stop" -- "$filePath";
}

function s(){
	local file=$(whereSelect "$2");
	git show $(resolveCaretRefs "$1" "$file"):"$file";
}

function whereSelect(){
	local results=$(where "$1");
	local count=$(echo "$results" | wc -l | awk '{print $1}');
	
	if [[ $count == 0 ]]; then
		echo 'no matching file\n';
	elif [[ $count == 1 ]]; then
		echo "$results";
	else
		echo 'The choice is yours: ' > /dev/tty;
		local x=1;

		for t in $results; do
			echo "$x) $t" > /dev/tty;
			x=$((x+1));
		done

		read selection;
		echo "$results" | sed -n "$selection p";
	fi
}

function tmx(){
	tmux attach-session -t $(tmux list-sessions | head -1 | awk '{print $1;}' | sed 's/://');
}


function replaceAll(){
	echo $PWD
	echo "s/$1/$2"
	find "$PWD" -type f -iname '*.py'  -exec gsed -i "s/$1/$2/" {} \;
}
